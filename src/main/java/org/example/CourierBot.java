package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class CourierBot extends TelegramLongPollingBot {

    private static final String DB_URL = "jdbc:mysql://localhost:3306/courier_service";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "1234";

    @Override
    public String getBotUsername() {
        return "garanttestdrivebot1bot";
    }

    @Override
    public String getBotToken() {
        return "7850699386:AAEc5eqsnUbEUm7tLp_rxU-k7wFmHUfELe8";
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            switch (messageText) {
                case "/start":
                    requestPhoneNumber(chatId);
                    break;
                case "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã":
                    sendAvailableOrders(chatId);
                    break;
                case "–ú–æ–∏ –∑–∞–∫–∞–∑—ã":
                    sendMyOrders(chatId);
                    break;
                default:
                    sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.");
            }
        } else if (update.hasMessage() && update.getMessage().hasContact()) {
            long chatId = update.getMessage().getChatId();
            String phoneNumber = update.getMessage().getContact().getPhoneNumber();

            if (saveCourierPhoneNumber(phoneNumber)) {
                sendMainMenu(chatId);
            } else {
                sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        } else if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            long chatId = update.getCallbackQuery().getMessage().getChatId();

            if (callbackData.startsWith("takeOrder_")) {
                int orderId = Integer.parseInt(callbackData.split("_")[1]);
                takeOrder(chatId, orderId);
            } else if (callbackData.startsWith("cancelOrder_")) {
                int orderId = Integer.parseInt(callbackData.split("_")[1]);
                cancelOrder(chatId, orderId);
            }
        }
    }

    private void requestPhoneNumber(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);

        KeyboardRow row = new KeyboardRow();
        KeyboardButton phoneButton = new KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
        phoneButton.setRequestContact(true);
        row.add(phoneButton);

        List<KeyboardRow> keyboard = new ArrayList<>();
        keyboard.add(row);

        keyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private boolean saveCourierPhoneNumber(String phoneNumber) {
        String query = "INSERT INTO couriers (phone_number) VALUES (?) ON DUPLICATE KEY UPDATE phone_number = ?";
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement statement = connection.prepareStatement(query)) {

            statement.setString(1, phoneNumber);
            statement.setString(2, phoneNumber);
            statement.executeUpdate();
            return true;

        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    private void sendMainMenu(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã"));
        row1.add(new KeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã"));

        keyboard.add(row1);

        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendAvailableOrders(long chatId) {
        String query = "SELECT * FROM orders WHERE status = '–ü—Ä–∏–Ω—è—Ç'";
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement statement = connection.prepareStatement(query);
             ResultSet resultSet = statement.executeQuery()) {

            boolean hasOrders = false;
            while (resultSet.next()) {
                hasOrders = true;
                int orderId = resultSet.getInt("order_id");
                String orderInfo = String.format(
                        "üìÑ *–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:* %d\n" +
                                "üìå *–°—Ç–∞—Ç—É—Å:* %s\n" +
                                "üìÖ *–°–æ–∑–¥–∞–Ω:* %s\n" +
                                "üìç *–ê–¥—Ä–µ—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:* %s\n" +
                                "üìû *–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:* %s\n",
                        orderId,
                        resultSet.getString("status"),
                        resultSet.getTimestamp("created_at"),
                        resultSet.getString("customer_address"),
                        resultSet.getString("customer_phone")
                );

                InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
                List<InlineKeyboardButton> row = new ArrayList<>();
                row.add(InlineKeyboardButton.builder()
                        .text("–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É")
                        .callbackData("takeOrder_" + orderId)
                        .build());
                keyboard.add(row);
                keyboardMarkup.setKeyboard(keyboard);

                SendMessage message = SendMessage.builder()
                        .chatId(chatId)
                        .text(orderInfo)
                        .replyMarkup(keyboardMarkup)
                        .parseMode("Markdown")
                        .build();
                execute(message);
            }

            if (!hasOrders) {
                sendMessage(chatId, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.");
            }

        } catch (SQLException | TelegramApiException e) {
            e.printStackTrace();
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã.");
        }
    }


    private void takeOrder(long chatId, int orderId) {
        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ.
        String phoneNumber = getPhoneNumberFromDatabase(chatId);
        if (phoneNumber == null) {
            sendMessage(chatId, "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.");
            return;
        }

        String query = "UPDATE orders SET status = '–í —Ä–∞–±–æ—Ç–µ', courier_phone = ? WHERE order_id = ? AND status = '–ü—Ä–∏–Ω—è—Ç'";
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement statement = connection.prepareStatement(query)) {

            statement.setString(1, phoneNumber);
            statement.setInt(2, orderId);

            int updatedRows = statement.executeUpdate();
            if (updatedRows > 0) {
                sendMessage(chatId, "‚úÖ –ó–∞–∫–∞–∑ ‚Ññ" + orderId + " —É—Å–ø–µ—à–Ω–æ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É.");
            } else {
                sendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∑–∞–∫–∞–∑ ‚Ññ" + orderId + ". –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –∫—É—Ä—å–µ—Ä–æ–º.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ" + orderId + " –≤ —Ä–∞–±–æ—Ç—É: " + e.getMessage());
        }
    }

    private void sendMyOrders(long chatId) {
        String query = "SELECT * FROM orders WHERE courier_id = ?";
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement statement = connection.prepareStatement(query)) {

            statement.setLong(1, chatId);
            ResultSet resultSet = statement.executeQuery();

            boolean hasOrders = false;
            while (resultSet.next()) {
                hasOrders = true;
                int orderId = resultSet.getInt("order_id");
                String orderInfo = String.format(
                        "üìÑ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: %d\n" +
                                "üìå –°—Ç–∞—Ç—É—Å: %s\n" +
                                "üìç –ê–¥—Ä–µ—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: %s\n" +
                                "üìû –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: %s\n\n",
                        orderId,
                        resultSet.getString("status"),
                        resultSet.getString("customer_address"),
                        resultSet.getString("customer_phone")
                );

                InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
                List<InlineKeyboardButton> row = new ArrayList<>();
                row.add(InlineKeyboardButton.builder()
                        .text("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è")
                        .callbackData("cancelOrder_" + orderId)
                        .build());
                keyboard.add(row);
                keyboardMarkup.setKeyboard(keyboard);

                SendMessage message = SendMessage.builder()
                        .chatId(chatId)
                        .text(orderInfo)
                        .replyMarkup(keyboardMarkup)
                        .build();
                execute(message);
            }

            if (!hasOrders) {
                sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.");
            }

        } catch (SQLException | TelegramApiException e) {
            e.printStackTrace();
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã.");
        }
    }

    private void cancelOrder(long chatId, int orderId) {
        String query = "UPDATE orders SET status = '–ü—Ä–∏–Ω—è—Ç', courier_id = NULL WHERE order_id = ? AND courier_id = ?";
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement statement = connection.prepareStatement(query)) {

            statement.setInt(1, orderId);
            statement.setLong(2, chatId);

            int updatedRows = statement.executeUpdate();
            if (updatedRows > 0) {
                sendMessage(chatId, "‚úÖ –ó–∞–∫–∞–∑ ‚Ññ" + orderId + " —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.");
            } else {
                sendMessage(chatId, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ" + orderId + ". –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –∫—É—Ä—å–µ—Ä—É.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ ‚Ññ" + orderId + ": " + e.getMessage());
        }
    }
    private String getPhoneNumberFromDatabase(long chatId) {
        String query = "SELECT phone_number FROM couriers WHERE chat_id = ?";
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement statement = connection.prepareStatement(query)) {

            statement.setLong(1, chatId);
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next()) {
                return resultSet.getString("phone_number");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }


    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}
