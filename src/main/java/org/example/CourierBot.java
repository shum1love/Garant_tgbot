package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class CourierBot extends TelegramLongPollingBot {

    private static final String DB_URL = "jdbc:mysql://localhost:3306/courier_service";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "1234";

    @Override
    public String getBotUsername() {
        return "garanttestdrivebot1bot"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    }

    @Override
    public String getBotToken() {
        return "7850699386:AAEc5eqsnUbEUm7tLp_rxU-k7wFmHUfELe8"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            switch (messageText) {
                case "/start":
                case "–°—Ç–∞—Ä—Ç":
                    sendMainMenu(chatId);
                    break;
                case "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã":
                    sendAvailableOrders(chatId);
                    break;
                case "–ú–æ–∏ –∑–∞–∫–∞–∑—ã":
                    sendMyOrders(chatId);
                    break;
                default:
                    sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.");
            }
        }
    }

    private void sendMainMenu(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã"));
        row1.add(new KeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã"));

        keyboard.add(row1);

        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendAvailableOrders(long chatId) {
        String query = "SELECT * FROM orders WHERE status = '–ü—Ä–∏–Ω—è—Ç'";
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement statement = connection.prepareStatement(query);
             ResultSet resultSet = statement.executeQuery()) {

            boolean ordersFound = false;

            while (resultSet.next()) {
                ordersFound = true;
                int orderId = resultSet.getInt("order_id");
                String status = resultSet.getString("status");
                Timestamp createdAt = resultSet.getTimestamp("created_at");
                Timestamp deliveryDeadline = resultSet.getTimestamp("delivery_deadline");
                String mainStore = resultSet.getString("main_store");
                String customerAddress = resultSet.getString("customer_address");

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
                String orderText = String.format(
                        "üìÑ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: %d\n" +
                                "üìå –°—Ç–∞—Ç—É—Å: %s\n" +
                                "üìÖ –°–æ–∑–¥–∞–Ω: %s\n" +
                                "‚è∞ –î–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ: %s\n" +
                                "üè¨ –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–≥–∞–∑–∏–Ω: %s\n" +
                                "üìç –ê–¥—Ä–µ—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: %s",
                        orderId,
                        status,
                        createdAt != null ? createdAt.toString() : "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                        deliveryDeadline != null ? deliveryDeadline.toString() : "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                        mainStore != null ? mainStore : "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                        customerAddress != null ? customerAddress : "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                );

                // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∑—è—Ç–∏—è –∑–∞–∫–∞–∑–∞
                InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
                List<InlineKeyboardButton> row = new ArrayList<>();

                InlineKeyboardButton button = new InlineKeyboardButton();
                button.setText("–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É");
                button.setCallbackData("takeOrder_" + orderId);

                row.add(button);
                keyboard.add(row);
                keyboardMarkup.setKeyboard(keyboard);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ —Å –∫–Ω–æ–ø–∫–æ–π
                SendMessage orderMessage = new SendMessage();
                orderMessage.setChatId(chatId);
                orderMessage.setText(orderText);
                orderMessage.setReplyMarkup(keyboardMarkup);

                execute(orderMessage);
            }

            if (!ordersFound) {
                // –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                sendMessage(chatId, "‚ùå –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.");
            }

        } catch (SQLException | TelegramApiException e) {
            e.printStackTrace();
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã: " + e.getMessage());
        }
    }


    private void sendMyOrders(long chatId) {
        String query = "SELECT * FROM orders WHERE courier_id = ?";
        StringBuilder response = new StringBuilder("üìã **–ú–æ–∏ –∑–∞–∫–∞–∑—ã:**\n");

        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement statement = connection.prepareStatement(query)) {

            statement.setLong(1, chatId); // –ò—Å–ø–æ–ª—å–∑—É–µ–º chatId –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫—É—Ä—å–µ—Ä–∞
            ResultSet resultSet = statement.executeQuery();

            boolean ordersFound = false;

            while (resultSet.next()) {
                ordersFound = true;
                int orderId = resultSet.getInt("order_id");
                String status = resultSet.getString("status");
                Timestamp deliveryDeadline = resultSet.getTimestamp("delivery_deadline");

                response.append(String.format(
                        "üìÑ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: %d\n" +
                                "üìå –°—Ç–∞—Ç—É—Å: %s\n" +
                                "‚è∞ –î–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ: %s\n\n",
                        orderId,
                        status,
                        deliveryDeadline != null ? deliveryDeadline.toString() : "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                ));
            }

            if (!ordersFound) {
                response.append("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤.");
            }

        } catch (SQLException e) {
            e.printStackTrace();
            response.append("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã: ").append(e.getMessage());
        }

        sendMessage(chatId, response.toString());
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}
