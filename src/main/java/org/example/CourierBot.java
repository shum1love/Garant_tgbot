package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class CourierBot extends TelegramLongPollingBot {

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    private static final String DB_URL = "jdbc:mysql://localhost:3306/courier_service";
    private static final String DB_USER = "tgbot"; // –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private static final String DB_PASSWORD = "1234"; // –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å

    @Override
    public String getBotUsername() {
        return "garanttestdrivebot1bot"; // –ò–º—è –±–æ—Ç–∞
    }

    @Override
    public String getBotToken() {
        return "7850699386:AAEc5eqsnUbEUm7tLp_rxU-k7wFmHUfELe8"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            if (messageText.equals("/start")) {
                sendStartMessage(chatId);
            } else if (messageText.startsWith("/status")) {
                String[] parts = messageText.split(" ");
                if (parts.length == 2) {
                    int orderId;
                    try {
                        orderId = Integer.parseInt(parts[1]);
                        String orderInfo = getOrderInfo(orderId);
                        sendMessage(chatId, orderInfo);
                    } catch (NumberFormatException e) {
                        sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.");
                    }
                } else {
                    sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /status [–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞]");
                }
            }
        } else if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            long chatId = update.getCallbackQuery().getMessage().getChatId();

            if (callbackData.equals("SHOW_ORDERS")) {
                String orders = getAvailableOrders();
                sendMessage(chatId, orders);
            }
        }
    }

    private void sendStartMessage(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É.");

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        List<InlineKeyboardButton> row = new ArrayList<>();
        InlineKeyboardButton startButton = new InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã");
        startButton.setCallbackData("SHOW_ORDERS");
        row.add(startButton);
        keyboard.add(row);
        keyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private String getAvailableOrders() {
        StringBuilder result = new StringBuilder("üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:**\n");
        String query = "SELECT * FROM orders WHERE status = '–ü—Ä–∏–Ω—è—Ç'";
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement statement = connection.prepareStatement(query);
             ResultSet resultSet = statement.executeQuery()) {

            while (resultSet.next()) {
                result.append(String.format(
                        "üìÑ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: %d\n" +
                                "üìå –°—Ç–∞—Ç—É—Å: %s\n" +
                                "üìÖ –°–æ–∑–¥–∞–Ω: %s\n" +
                                "‚è∞ –î–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ: %s\n" +
                                "üè¨ –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–≥–∞–∑–∏–Ω: %s\n" +
                                "üì¶ –ú–∞–≥–∞–∑–∏–Ω –¥–æ—Ç–∞—Ä–∫–∏: %s\n" +
                                "üìç –ê–¥—Ä–µ—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: %s\n" +
                                "üìû –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: %s\n",
                        resultSet.getInt("order_id"),
                        resultSet.getString("status"),
                        resultSet.getTimestamp("created_at"),
                        resultSet.getTimestamp("delivery_deadline"),
                        resultSet.getString("main_store"),
                        resultSet.getString("secondary_store") != null ? resultSet.getString("secondary_store") : "–ù–µ—Ç",
                        resultSet.getString("customer_address"),
                        resultSet.getString("customer_phone")
                ));
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã.";
        }

        if (result.toString().equals("üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:**\n")) {
            return "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.";
        }

        return result.toString();
    }

    private String getOrderInfo(int orderId) {
        String query = "SELECT * FROM orders WHERE order_id = ?";
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             PreparedStatement statement = connection.prepareStatement(query)) {

            statement.setInt(1, orderId);
            ResultSet resultSet = statement.executeQuery();

            if (resultSet.next()) {
                return String.format(
                        "üõí **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:**\n" +
                                "üìÑ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: %d\n" +
                                "üìå –°—Ç–∞—Ç—É—Å: %s\n" +
                                "üìÖ –°–æ–∑–¥–∞–Ω: %s\n" +
                                "‚è∞ –î–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ: %s\n" +
                                "üè¨ –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–≥–∞–∑–∏–Ω: %s\n" +
                                "üì¶ –ú–∞–≥–∞–∑–∏–Ω –¥–æ—Ç–∞—Ä–∫–∏: %s\n" +
                                "üìç –ê–¥—Ä–µ—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: %s\n" +
                                "üìû –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: %s\n",
                        resultSet.getInt("order_id"),
                        resultSet.getString("status"),
                        resultSet.getTimestamp("created_at"),
                        resultSet.getTimestamp("delivery_deadline"),
                        resultSet.getString("main_store"),
                        resultSet.getString("secondary_store") != null ? resultSet.getString("secondary_store") : "–ù–µ—Ç",
                        resultSet.getString("customer_address"),
                        resultSet.getString("customer_phone")
                );
            } else {
                return "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.";
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.";
        }
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}
